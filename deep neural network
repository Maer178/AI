#imports the libraries

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.layers import Activation, Dense
from tensorflow.python import keras

  #read the data
train_data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tes', header = None)
test_data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tra', header = None)

  test_data

  
X_train = train_data.iloc[:,:64]
Y_train = train_data.iloc[:,-1]
X_test = test_data.iloc[:, :64]
Y_test = test_data.iloc[: ,-1]

  print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

  X_train = np.array(X_train)
X_test = np.array(X_test)
Y_train = np.array(Y_train)
Y_test  = np.array(Y_test)

mat = X_train[1].reshape(8, 8)

plt.imshow(mat, cmap = "Greys")


  #normalize
X_train = (X_train-X_train.min()) / (X_train.max()-X_train.min())
X_test = (X_test-X_test.min()) / (X_test.max()-X_test.min())

  #building the model
model = tf.keras.Sequential([
  keras.layers.Dense(64 ,input_shape = (X_train[0].shape) ,activation = 'relu'),
  keras.layers.Dense(32 , activation='relu'),
  keras.layers.Dense(16 , activation='relu'),
  keras.layers.Dense(10 , activation='softmax')
])

  model.summary

  model.compile(loss='sparse_categorical_crossentropy',
             optimizer=tf.keras.optimizers.Adam(0.00001),
             metrics=['accuracy'])

  
history = model.fit(X_train, Y_train, epochs=200, validation_split=0.1, verbose=2)

  loss , accuracy = model.evaluate(X_test , Y_test)

